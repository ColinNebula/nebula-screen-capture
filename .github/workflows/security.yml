name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggers

jobs:
  security-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run npm audit (production only)
        run: npm audit --production --audit-level=high
      
      - name: Check for outdated packages
        run: npm outdated || true
      
      - name: Security scan with npm audit
        run: |
          echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit-report.json || true
          
          if [ -f audit-report.json ]; then
            VULNERABILITIES=$(cat audit-report.json | jq '.metadata.vulnerabilities | to_entries[] | select(.key != "info" and .key != "low") | .value' | paste -sd+ | bc)
            echo "### Vulnerabilities Found: $VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat audit-report.json | jq '.metadata.vulnerabilities' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Check for secrets in code
        run: |
          echo "Checking for potential secrets..."
          # Check for common secret patterns
          ! grep -r -i "api[_-]key" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/ || echo "Warning: Found 'api_key' pattern"
          ! grep -r -i "secret" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/ || echo "Warning: Found 'secret' pattern"
          ! grep -r -i "password\s*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/ || echo "Warning: Found 'password =' pattern"
          ! grep -r "AKIA[0-9A-Z]{16}" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/ || echo "Warning: Found AWS key pattern"
      
      - name: Verify .env files are not committed
        run: |
          if [ -f ".env" ]; then
            echo "ERROR: .env file found in repository!"
            echo "::error file=.env::Sensitive .env file should not be committed"
            exit 1
          else
            echo "‚úÖ No .env file found (correct)"
          fi
      
      - name: Check for eval() usage
        run: |
          echo "Checking for dangerous eval() usage..."
          if grep -r "eval(" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/; then
            echo "::warning::Found eval() usage - review for security implications"
          else
            echo "‚úÖ No eval() usage found"
          fi
      
      - name: Check for dangerouslySetInnerHTML
        run: |
          echo "Checking for dangerouslySetInnerHTML..."
          if grep -r "dangerouslySetInnerHTML" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" src/; then
            echo "::warning::Found dangerouslySetInnerHTML - ensure proper sanitization"
          else
            echo "‚úÖ No dangerouslySetInnerHTML found"
          fi
      
      - name: Verify CSP headers
        run: |
          if grep -q "Content-Security-Policy" public/index.html; then
            echo "‚úÖ CSP headers found in index.html"
          else
            echo "::error::CSP headers missing from index.html"
            exit 1
          fi
      
      - name: Generate security report
        if: always()
        run: |
          echo "# üîí Security Audit Summary" >> security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Branch:** ${{ github.ref }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Audit Results" >> security-report.md
          echo "" >> security-report.md
          npm audit --json > audit.json || true
          echo "\`\`\`" >> security-report.md
          cat audit.json | jq '.metadata' >> security-report.md || echo "No vulnerabilities data" >> security-report.md
          echo "\`\`\`" >> security-report.md
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
      
      - name: Comment PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = '## üîí Security Audit Results\n\n';
            
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
              const vulns = auditData.metadata.vulnerabilities;
              
              body += '### Vulnerability Summary\n';
              body += `- **Critical:** ${vulns.critical || 0}\n`;
              body += `- **High:** ${vulns.high || 0}\n`;
              body += `- **Moderate:** ${vulns.moderate || 0}\n`;
              body += `- **Low:** ${vulns.low || 0}\n`;
              
              if (vulns.critical > 0 || vulns.high > 0) {
                body += '\n‚ö†Ô∏è **Action Required:** Critical or high severity vulnerabilities found!\n';
              } else {
                body += '\n‚úÖ No critical or high severity vulnerabilities found.\n';
              }
            } catch (error) {
              body += 'Security audit completed. See workflow logs for details.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
